#!/usr/bin/python3

import os
import sys
from jinja2 import Environment, FileSystemLoader

env = Environment \
    ( loader        = FileSystemLoader ('/etc/templates')
    , trim_blocks   = False
    , lstrip_blocks = False
    )

# Fixed environment variables
vars = 'ORACLE_USER', 'ORACLE_HOST', 'ORACLE_PORT'
for k in vars :
    env.globals [k] = os.environ [k]
inst = {}

# Environment-variable DATABASE_INSTANCES
for db in os.environ ['DATABASE_INSTANCES'].split (',') :
    k, v = (x.strip () for x in db.split (':', 1))
    inst [k] = v
env.globals ['DATABASE_INSTANCES'] = inst

# Get passwords from /etc/passwords passed in via link-mount
with open ('/etc/passwords', 'r') as pw :
    for line in pw :
        line = line.strip ()
        if not line or line.startswith ('#') :
            continue
        k, v = (x.strip () for x in line.split ('=', 1))
        if k == 'DATABASE_PASSWORDS' :
            pws = {}
            for pwentry in v.split (',') :
                db, pw = (x.strip () for x in pwentry.split (':', 1))
                pws [db] = pw
            env.globals ['DATABASE_PASSWORDS'] = pws
        else :
            env.globals [k] = v

# Create all files in /etc/dynamic, this directory is writeable by
# whatever user the dynamic runtime will assign to the container.
# We use symlinks created during container creation (see Dockerfile)
# to point to the relevant dynamically-generated files in /etc/dynamic
files = \
    ( '/etc/dynamic/tnsnames.ora'
    , '/etc/dynamic/odbcinst.ini'
    , '/etc/dynamic/odbc.ini'
    )

for fn in files :
    tplname = os.path.basename (fn) + '.in'
    with open (fn, 'w') as f :
        tpl = env.get_template (tplname)
        f.write (tpl.render ())

# Default is initial_load (which doesn't write to the database)
cmd = '/opt/bin/etl.py'
arg = ['initial_load']
# ETL_COMMAND if set and non-empty wins over command-line args.
# This is done to make it easier to run different commands in OpenShift.
if os.environ.get ('ETL_COMMAND', '') :
    cmds = os.environ ['ETL_COMMAND'].split (' ')
    cmd  = cmds [0]
    arg  = cmds [1:]
elif len (sys.argv) > 1 :
    cmd = sys.argv [1]
    arg = sys.argv [2:]
arg0 = os.path.basename (cmd)
os.execl (cmd, arg0, *arg)
